;;;; -*- Lisp -*-
;;;;
;;;; $Id$
;;;;
;;;; Routines to read and write score files for various synthesis systems.
;;;;

(in-package :multires-rhythm)

(defgeneric save-to-file (object-to-write file-stream-or-name)
  (:documentation "Writes the object to the named file or given stream"))

;;; General MIDI percussion map key numbers:
(defparameter *cowbell* 56)
(defparameter *claves* 75)
(defparameter *hi-woodblock* 76)
(defparameter *low-woodblock* 77)
(defparameter *closed-hi-hat* 42)
(defparameter *bass-drum* 36)
(defparameter *snare-drum* 38)

(let ((note-tag 0))

  ;; TODO make this a method that is accompanied by a version that plays samples.
  (defun write-note (file-handle part time duration key-number &key (amplitude 1.0))
    "Writes out to file-handle the given note specified at an onset time
  instant. Increments the note-tag."
    (format file-handle "t ~,3f;~%" time)
    (format file-handle "~a (~f ~d) " part duration note-tag)
    ;;(cond 
    ;; ((eql instrument "SamplePlayer")
    ;;  (format file-handle "filename: \"~a\" " "~/Library/Sounds/hihat_closed.aiff"))
    ;; ((eql instrument "midi")
    ;;  (format file-handle "note: g3k, ")))
    (format file-handle "keyNum: ~d, " key-number)
    (format file-handle "amplitude: ~f;~%" amplitude)
    (incf note-tag))

  (defun write-intervals (file-handle intervals &key (duration 0.075))
    (loop
       ;; final rhythm is immaterial, so long as it's long enough for the sample
       for time = 0.0 then (+ time interval)
       for interval in (append intervals (list 1.0))
       do (write-note file-handle "handclap" time duration *low-woodblock*)
       finally (return time)))

  (defun write-labelled-times (file-handle labelled-times key-number-labels &key (duration 0.075))
    (loop
       for (part-label time) in labelled-times
       do (write-note file-handle part-label time duration (gethash part-label key-number-labels))))

    ;;(write-note velocities(timeIndex))

  ;; normally we handclap using a sample
  (defun save-scorefile-intervals (filename intervals &key (duration 0.075) (description "")
			 (instrument "SamplePlayer") (midi-channel 0))
    "Save the vectors as times and amplitudes of a MusicKit scorefile."
    (with-open-file (f filename :direction :output :if-exists :supersede)
      (format f "// MusicKit scorefile ~a~%" filename)
      (format f "// Generated by save-score~%")
      (format f "info tempo: 60, title: \"Handclapping to ~a\";~%" description)
      (format f "part handclap;~%")
      (format f "handclap synthPatchCount: 1, synthPatch: \"~a\", midiChan: ~d;~%~%"
	      instrument midi-channel)
      (format f "BEGIN;~%")
      ;;rhythms(length(times)) = 1.0;
      (setf note-tag 0)
      (write-intervals f intervals :duration duration)
      ;; (format f "t ~,3f;~%END;~%" time)))
      (format f "END;~%")))

  ;; normally we handclap using a sample
  (defun save-scorefile (filename onsets &key (duration 0.075) (description "")
			 (instrument "SamplePlayer") (midi-channel 0)
			 (key-numbers (list *low-woodblock* *cowbell* *claves*))
			 (tempo 60))
    "Save the vectors as times and amplitudes of a MusicKit scorefile."
    (with-open-file (f filename :direction :output :if-exists :supersede)
      (format f "// MusicKit scorefile ~a~%" filename)
      (format f "// Generated by save-score~%")
      (format f "info tempo: ~a, title: \"~a\";~%" tempo description)
      (loop
	 for part-onsets in onsets 
	 for key-number in key-numbers
	 for part-index = 0 then (incf part-index)
	 for part-name = (format nil "part~d" part-index)
	 for part-times = (mapcar (lambda (onset-time) (list part-name onset-time)) part-onsets)
	 with time-ordered = '()
	 with keynumber-labels = (make-hash-table :test #'equal)
	 do 
	   (format f "part ~a;~%" part-name)
	   (format f "~a synthPatchCount: 1, synthPatch: \"~a\", midiChan: ~d;~%~%"
		   part-name instrument midi-channel)
	   (setf (gethash part-name keynumber-labels) key-number)
	   (setf time-ordered (merge 'list time-ordered part-times #'< :key #'second))
	 finally 
	   (format f "BEGIN;~%")
	   (setf note-tag 0)
	   (write-labelled-times f time-ordered keynumber-labels :duration duration)
	   (format f "END;~%")))))

;; (save-scorefile "test-score.score" '((0.0 1.0 2.0) (0.0 1.1 1.9 2.5 5.7) (0.0 1.0 2.1 3.1)))

