Beat Critic: Beat Tracking Octave Error Identification By Metrical Profile Analysis
Leigh M. Smith ISMIR 2010 code documentation
26/3/2010

The beat critic code shares several functions with the ICMC paper code. So Matlab paths
need to be set to access the functions. The pathdef.m used is:

p = [...
%%% BEGIN ENTRIES %%%
    '/Users/lsmith/Research/Sources/Rhythm/IRCAM/double_time:', ...
    '/Users/lsmith/Research/Sources/Rhythm/IRCAM/ml_downbeat:', ...
    '/Users/lsmith/Research/Sources/Rhythm/IRCAM/similarity:', ...
     matlabroot,'/toolbox/matlab/general:', ...

The program ircambeat must be run over the entire dataset to produce the initial marker files, and is
not run by the Matlab code, it must be run before running double_time_test(). 

Each function is described at the start of the function. The calling sequence is:

1. The function that runs the code is double_time_test(). Comments at the start of the
function indicate the parameters to pass to test each of the four data sets and evaluations:

BT Good:  double_time_test('~/Research/Data/IRCAM-Beat/RWC/', 'GoodAnalyses', '~/Local_Data/RWC_WAV')
BT Full:  double_time_test('~/Research/Data/IRCAM-Beat/RWC/', 'FullAnalyses', '~/Local_Data/RWC_WAV')
BPM Good: double_time_test('~/Research/Data/IRCAM-Beat/RWC/', 'GoodAnalyses', '~/Local_Data/RWC_WAV', 'RWC_AnnotatedTempi.txt')
BPM Full: double_time_test('~/Research/Data/IRCAM-Beat/RWC/', 'FullAnalyses', '~/Local_Data/RWC_WAV', 'RWC_AnnotatedTempi.txt')

The first parameter specifies the root location of all data. The second parameter is the
sub-directory under that with the dataset, the third is the location of the audio files of
the data set (converted from RWC MP3 files using madplay). The optional fourth parameter
specifies the annotated tempo data set when comparing via BPM. To do the reestimation,
double_time_test() reruns ircambeat on the selected set of octave error examples.

2. The function which performs the double_time evaluation is
double_time_of_corpus(). This calls filtered_pattern with parameters to retrieve the
original pattern, half tempo pattern, counter phase half tempo and double tempo pattern.

3. filtered_pattern() reads or computes a metrical profile
("pattern") which is an instance of RhythmPattern class. When computing a pattern from the
audio file if a pattern file does not exist, filtered_pattern() reads a RhythmDescription
instance which encapsulates the spectral subband onset detection functions. A
spectral subband onset detection function (ODF) is calculated from the audio file using
read_rhythm_description() and odf(). The RhythmDescription is generated by also reading
beat markers files as computed by ircambeat with read_beats() which reads the XML using DOM.
A RhythmPattern instance is produced from a RhythmDescription using pattern_of_rhythm_description(). 

4. pattern_of_rhythm_description() produces a RhythmPattern instance which encapsulates
the data used in the ICMC 2010 paper, namely spectral subband metrical profiles,
syncopation profiles, hypermetrical profiles and tempo. The ISMIR paper code only uses
metrical profiles. All of the profiles are computed using observe_onsets().

5. observe_onsets() via observe_evidence_of() and silence_evidence() calculates the
likelihood of a silence occurring at each tatum across a rhythm onset detection function.


Rhythmic Similarity Using Metrical Profile Matching
Leigh M. Smith ICMC 2010 code documentation

The rhythm similarity code is run with process_ballroom(). This will run the evaluation on
the ballroom dataset at the location specified in ballroom(). It ultimately generates the
file full_test.arff in that ballroom directory. This is loaded in the machine learning
application Weka and different data subsets are selected using the Explorer interface.

